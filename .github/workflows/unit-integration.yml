name: unit-integration

# Controls when the action will run. Triggers the workflow on pull request
# events but only for the master and release-* branch
on:
  pull_request:
    branches:
      - master
      - release-*
  repository_dispatch:
    types: [run-all-tests-command, run-unit-test-command]

jobs:
  prepare:
    runs-on: ubuntu-18.04
    steps:
      - name: Parse sha
        id: parse_sha
        run: |
          set -x
          dm_version=${{ github.event.pull_request.head.sha }}
          if [[ -z "${{ github.event.pull_request.head.sha }}" ]];then dm_version=${{ github.event.client_payload.pull_request.head.sha }};fi
          tidb_version=${{ github.event.client_payload.slash_command.args.named.tidb }}
          if [[ -z "${{ github.event.client_payload.slash_command.args.named.tidb }}" ]];then tidb_version=nightly;fi
          if [[ "${{ github.event.client_payload.slash_command.args.named.tidb }}" =~ "master" ]]; then tidb_version=nightly;fi
          if [[ "${{ github.event.client_payload.slash_command.args.named.tidb }}" =~ "release" ]]; then tidb_version=${{ github.event.client_payload.slash_command.args.named.tidb }}-nightly;fi
          echo "::set-output name=dm_sha::${dm_version}"
          echo "::set-output name=tidb_sha::${tidb_version}"
          echo dm_sha ${dm_version}
          echo tidb_sha ${tidb_version}
      # set up golang env, GOPATH="/home/runner/go"ï¼ŒGOMODCACHE="/home/runner/go/pkg/mod"
      - name: Set up Go 1.13
        uses: actions/setup-go@v2
        with:
          go-version: 1.13
      - name: Print Go version
        run: go version
      - name: Check out code
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.parse_sha.outputs.dm_sha }}
      - name: Cache go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-dm-${{ hashFiles('**/go.sum') }}
      - name: Cache retool
        uses: actions/cache@v2
        with:
          path: |
            **/_tools
          key: ${{ runner.os }}-dm-retool-${{ hashFiles('**/_tools/manifest.json') }}
      - name: Cache other tools such as pt-online-schema-change and gh-ost
        id: cache-other-tools
        uses: actions/cache@v2
        with:
          path: _other_tools
          key: ${{ runner.os }}-dm-other-tools
      - name: Cache prepare results
        uses: actions/cache@v2
        with:
          path: /tmp/dm.tar.gz
          key: ${{ runner.os }}-dm-${{ steps.parse_sha.outputs.dm_sha }}-${{ steps.parse_sha.outputs.tidb_sha }}
      - name: DM Integration Test Build
        run: |
          set -x
          make dm_integration_test_build
          curl http://download.pingcap.org/tidb-enterprise-tools-latest-linux-amd64.tar.gz | tar xz
          mv tidb-enterprise-tools-latest-linux-amd64/bin/sync_diff_inspector bin/
          mv tidb-enterprise-tools-latest-linux-amd64/bin/mydumper bin/
          rm -r tidb-enterprise-tools-latest-linux-amd64 || true
          tidb_version=${{ steps.parse_sha.outputs.tidb_sha }}
          id=$(docker create pingcap/tidb:$tidb_version)
          docker cp $id:/tidb-server bin/
          if [ "true" != "${{ steps.cache-other-tools.outputs.cache-hit }}" ]
          then
              mkdir -p _other_tools
              wget https://github.com/github/gh-ost/releases/download/v1.1.0/gh-ost-binary-linux-20200828140552.tar.gz
              tar xzvf gh-ost-binary-linux-20200828140552.tar.gz
              mv gh-ost _other_tools
              wget https://www.percona.com/downloads/percona-toolkit/3.2.1/binary/tarball/percona-toolkit-3.2.1_x86_64.tar.gz
              tar xzvf percona-toolkit-3.2.1_x86_64.tar.gz
              cp percona-toolkit-3.2.1/bin/pt-online-schema-change _other_tools
              rm -r gh-ost-binary-linux-20200828140552.tar.gz percona-toolkit-3.2.1_x86_64.tar.gz percona-toolkit-3.2.1
          fi
          tar czvf /tmp/dm.tar.gz .
      - name: Set PR Status
        if: ${{ always() }}
        uses: niteoweb/pull_request_status_action@v1.0.0
        with:
          pr_number: ${{ github.event.client_payload.pull_request.number }}
          state: ${{ job.status }}
          repository: ${{ github.repository }}
          context: ${{ github.workflow }}
          target_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
#      - name: Upload dm build results
#        uses: actions/upload-artifact@v2
#        with:
#          name: dm-${{ github.event.pull_request.head.sha }}
#          path: dm.tar.gz
    outputs:
      dm_sha: ${{ steps.parse_sha.outputs.dm_sha }}
      tidb_sha: ${{ steps.parse_sha.outputs.tidb_sha }}

  unit_test:
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
#        test_name: [relay, syncer, pkg_binlog, others]
        test_name: [pkg_binlog]
    runs-on: ubuntu-18.04
    steps:
      - name: Cache go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-dm-${{ hashFiles('**/go.sum') }}
      - name: Cache prepare results
        uses: actions/cache@v2
        with:
          path: /tmp/dm.tar.gz
          key: ${{ runner.os }}-dm-${{ needs.prepare.outputs.dm_sha }}-${{ needs.prepare.outputs.tidb_sha }}
#      - name: Download dm build results
#        uses: actions/download-artifact@v2
#        with:
#          name: dm-${{ github.event.pull_request.head.sha }}
      - name: Unit Test ${{ matrix.test_name }}
        run: |
          set -x
          docker pull mysql:5.7
          docker run --name mysql-for-ut -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7 --log-bin --binlog-format=ROW --enforce-gtid-consistency=ON --gtid-mode=ON --server-id=1
          set +e && for i in {1..90}; do mysqladmin ping -h127.0.0.1 -P 3306 -uroot --silent; if [ $? -eq 0 ]; then set -e; break; else if [ $i -eq 90 ]; then set -e; exit 2; fi; sleep 2; fi; done
          rm -rf /tmp/dm_test
          mkdir -p /tmp/dm_test
          export MYSQL_HOST=127.0.0.1
          export MYSQL_PORT=3306
          export MYSQL_PSWD=123456
          export PATH=~/go/bin:$PATH
          export GHOST_BINARY=${{ github.workspace }}/_other_tools/gh-ost
          export PTOSC_BINARY=${{ github.workspace }}/_other_tools/pt-online-schema-change
          ls -lh /tmp/dm.tar.gz
          tar xzvf /tmp/dm.tar.gz
          make unit_test_${{ matrix.test_name }}
          rm -rf cov_dir
          mkdir -p cov_dir
          ls /tmp/dm_test
          cp /tmp/dm_test/cov*out cov_dir
          ls cov_dir
      - name: Cache coverage results
        uses: actions/cache@v2
        with:
          path: cov_dir
          key: ${{ runner.os }}-dm-ut-${{ matrix.test_name }}-${{ needs.prepare.outputs.dm_sha }}-${{ needs.prepare.outputs.tidb_sha }}
#      - name: Upload dm unit coverage
#        uses: actions/upload-artifact@v2
#        with:
#          name: dm-${{ github.event.pull_request.head.sha }}
#          path: dm.tar.gz

  integration_test:
    needs: prepare
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
      matrix:
        test_name: [dmctl_basic, dmctl_command]
#        test_name: [others, all_mode, dmctl_advance, dmctl_basic, dmctl_command, ha_cases, http_apis, import_goroutine_leak, incremental_mode, initial_unit, load_interrupt, online_ddl, print_status, relay_interrupt, safe_mode, sequence_safe_mode, sequence_sharding, shardddl1, shardddl2, shardddl3, sharding]
    steps:
      - name: Cache go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-dm-${{ hashFiles('**/go.sum') }}
      - name: Cache prepare results
        uses: actions/cache@v2
        with:
          path: /tmp/dm.tar.gz
          key: ${{ runner.os }}-dm-${{ needs.prepare.outputs.dm_sha }}-${{ needs.prepare.outputs.tidb_sha }}
      - name: Integration Test ${{ matrix.test_name }}
        run: |
          set -x
          docker pull mysql:5.7
          docker run --name mysql-for-ut -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7 --log-bin --binlog-format=ROW --enforce-gtid-consistency=ON --gtid-mode=ON --server-id=1
          docker run --name mysql-for-ut2 -p 3307:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7 --log-bin --binlog-format=ROW --enforce-gtid-consistency=ON --gtid-mode=ON --server-id=1
          set +e && for i in {1..90}; do mysqladmin ping -h127.0.0.1 -P 3306 -p123456 -uroot --silent; if [ $? -eq 0 ]; then set -e; break; else if [ $i -eq 90 ]; then set -e; exit 2; fi; sleep 2; fi; done
          set +e && for i in {1..90}; do mysqladmin ping -h127.0.0.1 -P 3307 -p123456 -uroot --silent; if [ $? -eq 0 ]; then set -e; break; else if [ $i -eq 90 ]; then set -e; exit 2; fi; sleep 2; fi; done
          rm -rf /tmp/dm_test
          mkdir -p /tmp/dm_test
          export MYSQL_HOST1=127.0.0.1
          export MYSQL_PORT1=3306
          export MYSQL_HOST2=127.0.0.1
          export MYSQL_PORT2=3307
          export PATH=~/go/bin:$PATH
          export GHOST_BINARY=${{ github.workspace }}/_other_tools/gh-ost
          export PTOSC_BINARY=${{ github.workspace }}/_other_tools/pt-online-schema-change
          ls -lh /tmp/dm.tar.gz
          tar xzvf /tmp/dm.tar.gz
          make integration_test CASE=${{ matrix.test_name }}
          rm -rf cov_dir
          mkdir -p cov_dir
          ls /tmp/dm_test
          cp /tmp/dm_test/cov*out cov_dir
      - name: Cache coverage results
        uses: actions/cache@v2
        with:
          path: cov_dir
          key: ${{ runner.os }}-dm-it-${{ matrix.test_name }}-${{ needs.prepare.outputs.dm_sha }}-${{ needs.prepare.outputs.tidb_sha }}

  check:
    needs: prepare
    runs-on: ubuntu-18.04
    steps:
      - name: Cache go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-dm-${{ hashFiles('**/go.sum') }}
      - name: Cache prepare results
        uses: actions/cache@v2
        with:
          path: /tmp/dm.tar.gz
          key: ${{ runner.os }}-dm-${{ needs.prepare.outputs.dm_sha }}-${{ needs.prepare.outputs.tidb_sha }}
      - name: Check
        run: |
          set -x
          export PATH=~/go/bin:$PATH
          tar xzvf /tmp/dm.tar.gz
          make check

  coverage:
    needs: [prepare, unit_test, integration_test, check]
    runs-on: ubuntu-18.04
    steps:
      - name: Cache go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-dm-${{ hashFiles('**/go.sum') }}
      - name: Cache prepare results
        uses: actions/cache@v2
        with:
          path: /tmp/dm.tar.gz
          key: ${{ runner.os }}-dm-${{ needs.prepare.outputs.dm_sha }}-${{ needs.prepare.outputs.tidb_sha }}
#      - uses: actions/cache@v2
#        with:
#          path: cov_dir
#          key: ${{ runner.os }}-dm-ut-relay-${{ needs.prepare.outputs.dm_sha }}-${{ needs.prepare.outputs.tidb_sha }}
#      - uses: actions/cache@v2
#        with:
#          path: cov_dir
#          key: ${{ runner.os }}-dm-ut-syncer-${{ needs.prepare.outputs.dm_sha }}-${{ needs.prepare.outputs.tidb_sha }}
      - uses: actions/cache@v2
        with:
          path: cov_dir
          key: ${{ runner.os }}-dm-ut-pkg_binlog-${{ needs.prepare.outputs.dm_sha }}-${{ needs.prepare.outputs.tidb_sha }}
#      - uses: actions/cache@v2
#        with:
#          path: cov_dir
#          key: ${{ runner.os }}-dm-ut-others-${{ needs.prepare.outputs.dm_sha }}-${{ needs.prepare.outputs.tidb_sha }}

      # test_name: [others, all_mode, dmctl_advance, dmctl_basic, dmctl_command, ha_cases, http_apis, import_goroutine_leak, incremental_mode, initial_unit,
      # load_interrupt, online_ddl, print_status, relay_interrupt, safe_mode, sequence_safe_mode, sequence_sharding, shardddl1, shardddl2, shardddl3, sharding]
#      - uses: actions/cache@v2
#        with:
#          path: cov_dir
#          key: ${{ runner.os }}-dm-it-others-${{ needs.prepare.outputs.dm_sha }}-${{ needs.prepare.outputs.tidb_sha }}
#      - uses: actions/cache@v2
#        with:
#          path: cov_dir
#          key: ${{ runner.os }}-dm-it-all_mode-${{ needs.prepare.outputs.dm_sha }}-${{ needs.prepare.outputs.tidb_sha }}
#      - uses: actions/cache@v2
#        with:
#          path: cov_dir
#          key: ${{ runner.os }}-dm-it-dmctl_advance-${{ needs.prepare.outputs.dm_sha }}-${{ needs.prepare.outputs.tidb_sha }}
      - uses: actions/cache@v2
        with:
          path: cov_dir
          key: ${{ runner.os }}-dm-it-dmctl_basic-${{ needs.prepare.outputs.dm_sha }}-${{ needs.prepare.outputs.tidb_sha }}
      - uses: actions/cache@v2
        with:
          path: cov_dir
          key: ${{ runner.os }}-dm-it-dmctl_command-${{ needs.prepare.outputs.dm_sha }}-${{ needs.prepare.outputs.tidb_sha }}
#      - uses: actions/cache@v2
#        with:
#          path: cov_dir
#          key: ${{ runner.os }}-dm-it-ha_cases-${{ needs.prepare.outputs.dm_sha }}-${{ needs.prepare.outputs.tidb_sha }}
#      - uses: actions/cache@v2
#        with:
#          path: cov_dir
#          key: ${{ runner.os }}-dm-it-http_apis-${{ needs.prepare.outputs.dm_sha }}-${{ needs.prepare.outputs.tidb_sha }}
#      - uses: actions/cache@v2
#        with:
#          path: cov_dir
#          key: ${{ runner.os }}-dm-it-import_goroutine_leak-${{ needs.prepare.outputs.dm_sha }}-${{ needs.prepare.outputs.tidb_sha }}
#      - uses: actions/cache@v2
#        with:
#          path: cov_dir
#          key: ${{ runner.os }}-dm-it-incremental_mode-${{ needs.prepare.outputs.dm_sha }}-${{ needs.prepare.outputs.tidb_sha }}
#      - uses: actions/cache@v2
#        with:
#          path: cov_dir
#          key: ${{ runner.os }}-dm-it-initial_unit-${{ needs.prepare.outputs.dm_sha }}-${{ needs.prepare.outputs.tidb_sha }}
#      - uses: actions/cache@v2
#        with:
#          path: cov_dir
#          key: ${{ runner.os }}-dm-it-load_interrupt-${{ needs.prepare.outputs.dm_sha }}-${{ needs.prepare.outputs.tidb_sha }}
#      - uses: actions/cache@v2
#        with:
#          path: cov_dir
#          key: ${{ runner.os }}-dm-it-online_ddl-${{ needs.prepare.outputs.dm_sha }}-${{ needs.prepare.outputs.tidb_sha }}
#      - uses: actions/cache@v2
#        with:
#          path: cov_dir
#          key: ${{ runner.os }}-dm-it-print_status-${{ needs.prepare.outputs.dm_sha }}-${{ needs.prepare.outputs.tidb_sha }}
#      - uses: actions/cache@v2
#        with:
#          path: cov_dir
#          key: ${{ runner.os }}-dm-it-relay_interrupt-${{ needs.prepare.outputs.dm_sha }}-${{ needs.prepare.outputs.tidb_sha }}
#      - uses: actions/cache@v2
#        with:
#          path: cov_dir
#          key: ${{ runner.os }}-dm-it-safe_mode-${{ needs.prepare.outputs.dm_sha }}-${{ needs.prepare.outputs.tidb_sha }}
#      - uses: actions/cache@v2
#        with:
#          path: cov_dir
#          key: ${{ runner.os }}-dm-it-sequence_safe_mode-${{ needs.prepare.outputs.dm_sha }}-${{ needs.prepare.outputs.tidb_sha }}
#      - uses: actions/cache@v2
#        with:
#          path: cov_dir
#          key: ${{ runner.os }}-dm-it-sequence_sharding-${{ needs.prepare.outputs.dm_sha }}-${{ needs.prepare.outputs.tidb_sha }}
#      - uses: actions/cache@v2
#        with:
#          path: cov_dir
#          key: ${{ runner.os }}-dm-it-shardddl1-${{ needs.prepare.outputs.dm_sha }}-${{ needs.prepare.outputs.tidb_sha }}
#      - uses: actions/cache@v2
#        with:
#          path: cov_dir
#          key: ${{ runner.os }}-dm-it-shardddl2-${{ needs.prepare.outputs.dm_sha }}-${{ needs.prepare.outputs.tidb_sha }}
#      - uses: actions/cache@v2
#        with:
#          path: cov_dir
#          key: ${{ runner.os }}-dm-it-shardddl3-${{ needs.prepare.outputs.dm_sha }}-${{ needs.prepare.outputs.tidb_sha }}
#      - uses: actions/cache@v2
#        with:
#          path: cov_dir
#          key: ${{ runner.os }}-dm-it-sharding-${{ needs.prepare.outputs.dm_sha }}-${{ needs.prepare.outputs.tidb_sha }}
      - name: Upload Coverage
        run: |
          set -x
          ls -lh /tmp/dm.tar.gz
          tar xzvf /tmp/dm.tar.gz
          ls cov_dir
          rm -rf /tmp/dm_test
          mkdir -p /tmp/dm_test
          cp cov_dir/* /tmp/dm_test
          export PATH=~/go/bin:$PATH
          set +x
          COVERALLS_TOKEN="${{ secrets.COVERALLS_TOKEN }}" CODECOV_TOKEN="${{ secrets.CODECOV_TOKEN }}" JenkinsCI=1 make coverage || true
      - name: Set up tmate session
        if: ${{ failure() }}
        uses: mxschmitt/action-tmate@v2

  Notify:
    needs: [coverage]
    runs-on: ubuntu-18.04
    if: ${{ always() }}
    steps:
      - name: Slack notification
        uses: Ilshidur/action-slack@2.1.0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_NOTIFY }}
        with:
          args: "dm unit_integration test job failed, see https://github.com/pingcap/dm/actions/runs/{{ GITHUB_RUN_ID }}"
